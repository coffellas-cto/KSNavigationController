{
  "name": "KSNavigationController",
  "tagline": "UINavigationController for macOS (Swift, Objective-C)",
  "body": "# KSNavigationController\r\nUINavigationController for macOS (Swift, Objective-C)\r\n\r\n![ksnavigationcontrollerdemo](https://cloud.githubusercontent.com/assets/3193877/17337372/04002c08-58eb-11e6-9c1f-2cabdea4dd66.gif)\r\n\r\nLooking for macOS (Mac OS X) analog of UIKit's `UINavigationController` from iOS? This class mimics its behavior.\r\n\r\n**Attention**: Navigation bar is not implemented. All methods must be called from main thread.\r\n\r\nSwift version (2.2): [KSNavigationController/Swift](https://github.com/coffellas-cto/KSNavigationController/tree/master/KSNavigationController/Swift)\r\n\r\nObjC version: [KSNavigationController/ObjectiveC](https://github.com/coffellas-cto/KSNavigationController/tree/master/KSNavigationController/ObjectiveC)\r\n\r\n## Usage\r\n### Creating a navigation controller\r\n```swift\r\n// Swift\r\nlet vc1 = TestViewController()\r\nlet navVC = KSNavigationController(rootViewController: vc1)\r\nnavVC?.view.frame = NSMakeRect(0.0, 0.0, 480.0, 272.0) // Or use constraints if appropriate\r\nself.window.contentViewController = navVC\r\nself.window.orderFrontRegardless()\r\n```\r\n\r\n```objc\r\n// ObjC\r\nTestViewController *vc1 = [[TestViewController alloc] init];\r\nKSNavigationController *navVC = [[KSNavigationController alloc] initWithRootViewController:vc1];\r\nnavVC.view.frame = NSMakeRect(0.0, 0.0, 480.0, 272.0); // Or use constraints if appropriate\r\nself.window.contentViewController = navVC;\r\n[self.window orderFrontRegardless];\r\n```\r\nHere your `TestViewController` class is a subclass of `NSViewController`. It also has to conform to `KSNavigationControllerCompatible` protocol in order to have access to `navigationController` property.\r\n### Pushing and popping view controllers onto / from stack\r\nNow, inside your `NSViewController` you can access `navigationController` property (just like in iOS) and push any new view controller on top of navigation stack:\r\n```swift\r\n// Swift\r\n@IBAction func pushAction(sender: AnyObject) {\r\n    self.navigationController?.pushViewController(TestViewController(), animated: true)\r\n}\r\n```\r\n\r\n```objc\r\n// ObjC\r\n- (IBAction)pushAction:(id)sender {\r\n    [self.navigationController pushViewController:[[TestViewController alloc] init] animated:YES];\r\n}\r\n```\r\n\r\nDo the following to pop the top view controller from stack:\r\n```swift\r\n// Swift\r\nself.navigationController?.popViewControllerAnimated(true)\r\n```\r\n\r\n```objc\r\n// ObjC\r\n[self.navigationController popViewControllerAnimated:YES];\r\n```\r\n\r\n## KSNavigationControllerCompatible protocol\r\nConform to this protocol if you want your `NSViewController` subclass to work with `KSNavigationController`.\r\n\r\nThis protocol has only one property:\r\n```swift\r\n/*Swift*/ weak var navigationController: KSNavigationController? {get set}\r\n```\r\n\r\n```objc\r\n/*ObjC*/ @property (weak, nonatomic) KSNavigationController *navigationController;\r\n```\r\n\r\n**Warning:** Do not set this properly by yourself.\r\n\r\n**Objective-C only:**\r\nYou must synthesize `navigationController` property explicitly in your subclass implementation:\r\n```objc\r\n@synthesize navigationController = _navigationController;\r\n```\r\n\r\nSee example projects for more understanding.\r\n\r\n## License\r\nPublished under MIT license.\r\n\r\nCopyright (c) 2016 A. Gordiyenko.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}